# -*- coding: utf-8 -*-
"""Project 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cwvJzmMkVTLYcru4ixsyJLyX0JWEwKi3

Names: Richard Cai (rjc432), Wenkai Zhao (wz459)

Topic:


1.   Effect of exports of different natural resources on curruption index and/or country's economy. Read on the "[resource curse](https://wikipedia.org/wiki/resource_curse)" and "[dutch disease](https://wikipedia.org/wiki/dutch_disease)" on [Wikipedia.org](https://Wikipedia.org).
2.   List item



Dataset Source: Plan on using [comtradeplus.un.org](https://comtradeplus.un.org)
[Oil dataset](https://comtradeplus.un.org/TradeFlow?Frequency=A&Flows=X&CommodityCodes=2709&Partners=0&Reporters=all&period=all&AggregateBy=none&BreakdownMode=plus)

**Abstract:**

**Write-Up:**
"""

import numpy as np
import pandas as pd
from sklearn.metrics import recall_score
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import tree
from sklearn import datasets
import matplotlib.pyplot as plt
from sklearn.svm import SVC
import seaborn as sns

# from google.colab import drive
# drive.mount('/content/drive')
# df = pd.read_csv('/content/drive/My Drive/INFO 1998 Project/cleanedcoaldata.csv')


cereals = pd.read_csv('/content/RCereals.csv')
inorganic = pd.read_csv('/content/RInorganic.csv')
mineral = pd.read_csv('/content/RMineral.csv')
ores = pd.read_csv('/content/ROres.csv')
wood = pd.read_csv('/content/RWood.csv')
cereals=cereals.drop([0, 0])
inorganic=inorganic.drop([0, 0])
mineral=mineral.drop([0, 0])
ores=ores.drop([0, 0])
wood=wood.drop([0, 0])

all_exports = [cereals,inorganic,mineral,ores,wood]

print(cereals.head())
print(inorganic.head())
print(mineral.head())
print(ores.head())
print(wood.head())

print(cereals.size)
print(inorganic.size)
print(mineral.size)
print(ores.size)
print(wood.size)

for export_type in all_exports:
  inputs = export_type[['year', 'dollar_value']]
  # export_type.drop("export_code", axis =1 )
  outputs = cereals['country_code']
  x = inputs
  y = outputs
  model = LinearRegression()
  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)
  model.fit(x_train, y_train)
  predictions = model.predict(x_test)
  print("R-squared:",r2_score(y_test, predictions))

"""<!--  -->"""

# cereals.drop("export_code", axis =1 )
inputs = cereals[['year', 'dollar_value']]
print(inputs)
outputs = cereals['country_code']
x = inputs
y = outputs
model = LinearRegression()
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)
model.fit(x_train, y_train)
predictions = model.predict(x_test)
print("R-squared:",r2_score(y_test, predictions))

X_C = cereals[['year']]
print(X_C)
y_C = cereals[['dollar_value']]

x_tr_C, x_te_C, y_tr_C, y_te_C = train_test_split(X_C, y_C, test_size = 0.2, random_state=42)

cereals_model = LinearRegression()
cereals_model.fit(x_tr_C, y_tr_C)

# X_R = cereals[['Apparent Temperature (R)']]
# y_R = cereals[['Temperature (R)']]

# x_tr_R, x_te_R, y_tr_R, y_te_R = train_test_split(X_R, y_R, test_size = 0.2, random_state=42)

# rankines_model = LinearRegression()
# rankines_model.fit(x_tr_R, y_tr_R)

fig2D = plt.figure()

# plt.acorr()

plt.scatter(cereals['year'],cereals['dollar_value'])

plt.title('dollar_value vs year')
plt.xlabel('year')
plt.ylabel('dollar_value')

plt.show()

plt.acorr(cereals['dollar_value'], maxlags=10)  # Adjust maxlags as needed

plt.title('Autocorrelation of Dollar Value')
plt.show()

from sklearn.metrics import root_mean_squared_error

# TODO store the predictions for the test sets
cereals_predictions = cereals_model.predict(x_te_C)
# rankines_predictions = rankines_model.predict(x_te_R)

# TODO find mean squared error of each model's predictions
cereals_MSE = root_mean_squared_error(cereals_predictions, y_te_C) ** 2
# rankines_MSE = root_mean_squared_error(rankines_predictions, y_te_R) ** 2

print("cereals MSE:", cereals_MSE)
# print("rankines MSE:", rankines_MSE)

import pandas as pd

# Load data
fileNames = ["RCereals.csv", "RInorganic.csv", "RMineral.csv", "ROres.csv", "RWood.csv"]
hdi_file = "HDI_data_global_trimmed_transposed.csv"
for i in range(len(fileNames)):
    rcereals_file = fileNames[i]
    df_hdi = pd.read_csv(hdi_file, index_col=0)
    df_rcereals = pd.read_csv(rcereals_file)
    # Convert year to string for consistent matching
    df_rcereals["year"] = df_rcereals["year"].astype(str)
    # Ensure only valid country codes and years are matched
    valid_countries = set(df_hdi.index)
    valid_years = set(df_hdi.columns)
    # Perform the matching
    df_rcereals["HDI_value"] = df_rcereals.apply(
        lambda row: df_hdi.at[row["country_code_letter"], row["year"]]
        if (row["country_code_letter"] in valid_countries) and (row["year"] in valid_years)
        else None,
        axis=1
    )
    # Save the updated file
    df_rcereals.to_csv(fileNames[i] + "_with_HDI.csv", index=False)
    print("Updated file saved as '" + fileNames [i] + "_with_HDI.csv'")